// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

//pre generated models
model User {
  id            String    @id @map("_id")
  name          String
  email         String
  emailVerified Boolean
  image         String?
  role          String?
  language      String?
  createdAt     DateTime
  updatedAt     DateTime
  sessions      Session[]
  accounts      Account[]

  @@unique([email])
  @@map("user")
}

model Session {
  id        String   @id @map("_id")
  expiresAt DateTime
  token     String
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id @map("_id")
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id @map("_id")
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}

//models for feats

// model Video {
//   id            String    @id @map("_id")
//   title         String
//   description   String?
//   fileUrl       String    // Filebase bucket address for the video
//   uploadedAt    DateTime
//   userId        String
//   user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
//   transcript    Transcript?
//   isProcessed   Boolean   @default(false)

//   @@map("video")
// }

// model Transcript {
//   id            String    @id @map("_id")
//   videoId       String    @unique
//   video         Video     @relation(fields: [videoId], references: [id], onDelete: Cascade)
//   fileUrl       String    // Filebase bucket address for transcript (PDF or text)
//   previewText   String?   // Short preview or summary
//   generatedAt   DateTime
//   downloads     Int       @default(0)
//   targetLanguage String   // User's native language (from session at signup)

//   @@map("transcript")
// }

model lecture {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  videoUrl    String
  transcriptUrl String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}
